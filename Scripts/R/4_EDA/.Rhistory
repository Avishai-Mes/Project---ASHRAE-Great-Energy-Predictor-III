trainset[[n]]
library(readr)
library(visdat)
library(dplyr)
library(ggplot2)
library(psych)
library(writexl)
library(odbc)
library(DBI)
library(dbscan)
library(naniar)
library(cocor)
library(gridExtra)
source("./mechkar.R")  # import local module (R script with functions)
source("./utils.R")
library(readr)
library(visdat)
library(dplyr)
library(ggplot2)
library(psych)
library(writexl)
library(odbc)
library(DBI)
library(dbscan)
library(naniar)
library(cocor)
library(gridExtra)
source("./mechkar.R")  # import local module (R script with functions)
source("./utils.R")
trainset <- data.frame(read.csv("C:/Users/Avishai/Documents/General/Personal/DS Course/Google drive content/Projects/Final project-ASHRAE-Great Energy Predictor III/Data/train_build_weather.csv"))
trainset[[n]]
trainset
trainset[[air_temperature]]
trainset[['air_temperature']]
is.na(trainset[['air_temperature']]
is.na(trainset[['air_temperature']])
is.na(trainset[['air_temperature']])
trainset[['air_temperature']]
is.na(trainset[['air_temperature']])
trainset[is.na(trainset[['air_temperature']]),]
trainset[is.na(trainset[['air_temperature']]),]
is.na(trainset[['air_temperature']])
trainset[is.na(trainset[['air_temperature']]),]
for (n in names(trainset)) {
print(trainset[is.na(trainset[[n]]),][n])
}
library(readr)
library(visdat)
library(dplyr)
library(ggplot2)
library(psych)
library(writexl)
library(odbc)
library(DBI)
library(dbscan)
library(naniar)
library(cocor)
library(gridExtra)
source("./mechkar.R")  # import local module (R script with functions)
source("./utils.R")
trainset <- data.frame(read.csv("C:/Users/Avishai/Documents/General/Personal/DS Course/Google drive content/Projects/Final project-ASHRAE-Great Energy Predictor III/Data/train_build_weather.csv"))
writexl::write_xlsx(data.frame(sapply(trainset, min)),"C:/Users/Avishai/Documents/General/Personal/DS Course/Google drive content/Projects/Final project-ASHRAE-Great Energy Predictor III/Excel files/Min column.xlsx")
result <- data.frame(column_name = colnames(trainset), min_value = min_vals)
# Print the resulting table
print(result)
writexl::write_xlsx(data.frame(sapply(trainset, min, na.rm = TRUE)),"C:/Users/Avishai/Documents/General/Personal/DS Course/Google drive content/Projects/Final project-ASHRAE-Great Energy Predictor III/Excel files/Min column.xlsx")
result <- data.frame(column_name = colnames(trainset), min_value = min_vals)
# Print the resulting table
print(result)
writexl::write_xlsx(data.frame(sapply(trainset, min, na.rm = TRUE)),"C:/Users/Avishai/Documents/General/Personal/DS Course/Google drive content/Projects/Final project-ASHRAE-Great Energy Predictor III/Excel files/Min column.xlsx")
result <- data.frame(column_name = colnames(trainset), min_value = min_vals)
# Print the resulting table
print(result)
writexl::write_xlsx(data.frame(sapply(trainset, max, na.rm = TRUE)),"C:/Users/Avishai/Documents/General/Personal/DS Course/Google drive content/Projects/Final project-ASHRAE-Great Energy Predictor III/Excel files/Min column.xlsx")
This file is created for receiving 'Min' value column for the 'Data retrieval
writexl::write_xlsx(data.frame(sapply(trainset, min, na.rm = TRUE)),"C:/Users/Avishai/Documents/General/Personal/DS Course/Google drive content/Projects/Final project-ASHRAE-Great Energy Predictor III/Excel files/Min column.xlsx")
writexl::write_xlsx(data.frame(sapply(trainset, max, na.rm = TRUE)),"C:/Users/Avishai/Documents/General/Personal/DS Course/Google drive content/Projects/Final project-ASHRAE-Great Energy Predictor III/Excel files/Max column.xlsx")
summary(trainset)
summary(trainset)
library(readr)
library(visdat)
library(dplyr)
library(ggplot2)
library(psych)
library(writexl)
library(odbc)
library(DBI)
library(dbscan)
library(naniar)
library(cocor)
library(gridExtra)
source("./mechkar.R")  # import local module (R script with functions)
source("./utils.R")
library(readr)
library(visdat)
library(dplyr)
library(ggplot2)
library(psych)
library(writexl)
library(odbc)
library(DBI)
library(dbscan)
library(naniar)
library(cocor)
library(gridExtra)
source("./mechkar.R")  # import local module (R script with functions)
source("./utils.R")
trainset <- data.frame(read.csv("C:/Users/Avishai/Documents/General/Personal/DS Course/Google drive content/Projects/Final project-ASHRAE-Great Energy Predictor III/Data/train_build_weather.csv"))
# 'exploreData' - a function that retrieves descriptive statistics and graphs
# y is optional
suppressWarnings(exploreData(data=trainset, y="revenue",
dir="C:\Users\Avishai\Documents\General\Personal\DS Course\Google drive content\Projects\Final project-ASHRAE-Great Energy Predictor III\variable distribution-before data cleansing"))
# 'exploreData' - a function that retrieves descriptive statistics and graphs
# y is optional
suppressWarnings(exploreData(data=trainset, y="revenue",
dir="C:/Users/Avishai/Documents/General/Personal/DS Course/Google drive content/Projects/Final project-ASHRAE-Great Energy Predictor III/variable distribution-before data cleansing"))
# 'exploreData' - a function that retrieves descriptive statistics and graphs
# y is optional
suppressWarnings(exploreData(data=trainset, y="revenue",
dir="C:/Users/Avishai/Documents/General/Personal/DS Course/Google drive content/Projects/Final project-ASHRAE-Great Energy Predictor III/variable distribution-before data cleansing"))
sapply(trainset, is.numeric)
names(trainset)
names(trainset)[site_id]
names(trainset)['site_id']
names(trainset)['year_built']
names(trainset)['year_built']
# 'corr.test' - correlation for a full matrix + p val
# "pairwise.complete.obs" drops the rows with missings, only for the pair it
## calculates the correlation for, at the iteration, and not of the entire dataset.
numlst <- names(trainset)[sapply(trainset, is.numeric)]
dfcormat <- psych::corr.test(trainset[,numlst], use = "pairwise.complete.obs"
, method = "spearman")
numlst
dfcormat
View(dfcormat)
dfcormat$r
